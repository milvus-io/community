{"codeList":["import numpy as np\n\n# Function to calculate euclidean distance\ndef euclidean_distance(a, b):\nreturn np.linalg.norm(a - b)\n\n# Function to perform knn\ndef knn(data, target, k):\n# Calculate distances between target and all points in the data\ndistances = [euclidean_distance(d, target) for d in data]\n# Combine distances with data indices\ndistances = np.array(list(zip(distances, np.arange(len(data)))))\n\n# Sort by distance\nsorted_distances = distances[distances[:, 0].argsort()]\n\n# Get the top k closest indices\nclosest_k_indices = sorted_distances[:k, 1].astype(int)\n\n# Return the top k closest vectors\nreturn data[closest_k_indices]\n","# Define some 2D vectors\ndata = np.random.rand(100, 2)\n\n# Define a target vector\ntarget = np.array([0.5, 0.5])\n\n# Define k\nk = 3\n\n# Perform knn\nclosest_vectors = knn(data, target, k)\n\n# Print the result\nprint(\"The closest vectors are:\")\nprint(closest_vectors)\n","import numpy as np\nimport faiss\n\n# Generate some example data\ndimension = 64 # dimension of the vector space\ndatabase_size = 10000 # size of the database\nquery_size = 100 # number of queries to perform\nnp.random.seed(123) # make the random numbers predictable\n\n# Generating vectors to index in the database (db_vectors)\ndb_vectors = np.random.random((database_size, dimension)).astype('float32')\n\n# Generating vectors for query (query_vectors)\nquery_vectors = np.random.random((query_size, dimension)).astype('float32')\n\n# Building the index\nindex = faiss.IndexFlatL2(dimension) # using the L2 distance metric\nprint(index.is_trained) # should return True\n\n# Adding vectors to the index\nindex.add(db_vectors)\nprint(index.ntotal) # should return database_size (10000)\n\n# Perform a search\nk = 4 # we want to see 4 nearest neighbors\ndistances, indices = index.search(query_vectors, k)\n\n# Print the results\nprint(\"Indices of nearest neighbors: \\n\", indices)\nprint(\"\\nL2 distances to the nearest neighbors: \\n\", distances)\n"],"headingContent":"","anchorList":[{"label":"ما هو البحث المتجه، وكيف يعمل؟","href":"What-is-vector-search-and-how-does-it-work","type":2,"isActive":false},{"label":"تقنيات البحث عن المتجهات الشائعة","href":"Popular-vector-search-technologies","type":2,"isActive":false},{"label":"الفوائد الرئيسية لقواعد البيانات المتجهة المصممة لهذا الغرض","href":"Key-benefits-of-purpose-built-vector-databases","type":2,"isActive":false},{"label":"بدء العمل مع Milvus في 3 خطوات بسيطة في غضون 10 دقائق","href":"Getting-started-with-Milvus-in-3-simple-steps-within-10-minutes","type":2,"isActive":false}]}