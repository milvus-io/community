{"codeList":["std::vector<meta::CollectionSchema> collection_array; \n auto status = meta_ptr_->ShowPartitions(collection.collection_id_, collection_array); \n  \n collection_array.push_back(collection); \n status = meta_ptr_->FilesByTypeEx(collection_array, file_types, files_holder); \n if (!status.ok()) { \n     std::string err_msg = \"Failed to get files for GetVectorByID: \" + status.message(); \n     LOG_ENGINE_ERROR_ << err_msg; \n     return status; \n } \n  \n if (files_holder.HoldFiles().empty()) { \n     LOG_ENGINE_DEBUG_ << \"No files to get vector by id from\"; \n     return Status(DB_NOT_FOUND, \"Collection is empty\"); \n } \n  \n cache::CpuCacheMgr::GetInstance()->PrintInfo(); \n status = GetVectorsByIdHelper(id_array, vectors, files_holder); \nDBImpl::GetVectorsByIdHelper(const IDNumbers& id_array, std::vector<engine::VectorsData>& vectors, \n                              meta::FilesHolder& files_holder) { \n     // attention: this is a copy, not a reference, since the files_holder.UnMarkFile will change the array internal \n     milvus::engine::meta::SegmentsSchema files = files_holder.HoldFiles(); \n     LOG_ENGINE_DEBUG_ << \"Getting vector by id in \" << files.size() << \" files, id count = \" << id_array.size(); \n  \n     // sometimes not all of id_array can be found, we need to return empty vector for id not found \n     // for example: \n     // id_array = [1, -1, 2, -1, 3] \n     // vectors should return [valid_vector, empty_vector, valid_vector, empty_vector, valid_vector] \n     // the ID2RAW is to ensure returned vector sequence is consist with id_array \n     using ID2VECTOR = std::map<int64_t, VectorsData>; \n     ID2VECTOR map_id2vector; \n  \n     vectors.clear(); \n  \n     IDNumbers temp_ids = id_array; \n     for (auto& file : files) { \n"],"headingContent":"Inside Milvus 1.1.0","anchorList":[{"label":"新機能","href":"New-features","type":2,"isActive":false},{"label":"改良点","href":"Improvements","type":2,"isActive":false},{"label":"バグ修正","href":"Bug-fixes","type":2,"isActive":false}]}