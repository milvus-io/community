{"codeList":["from keras.applications.resnet50 import ResNet50\nimport tensorflow as tf\n\n# load keras-resnet50 model and save as a floder\nmodel_resnet50 = ResNet50(include_top=False, pooling='max', weights='imagenet')\ntf.saved_model.save(model_resnet50, \"keras_resnet50_model\")\n\n# convert resnet50 model to onnx\n! python -m tf2onnx.convert --saved-model \"keras_resnet50_model\" --output \"onnx_resnet50.onnx\"\n","# get the image vectors with onnx model\ndef get_onnx_vectors(onnx_model, img_path):\n    img = image.load_img(img_path, target_size=(224, 224))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n    \n    sess = onnxruntime.InferenceSession(onnx_model)\n    x = x if isinstance(x, list) else [x]\n    feed = dict([(input.name, x[n]) for n, input in enumerate(sess.get_inputs())])\n    feat = sess.run(None, feed)[0]\n    \n    norm_feat = feat[0] / LA.norm(feat[0])\n    norm_feat = [i.item() for i in norm_feat]\n    return norm_feat\n","# generate vectors with ResNet50 and VGG16 ONNX model\n2vec_resnet = get_onnx_vectors(\"onnx_resnet50.onnx\", \"./pic/example.jpg\")\n3vec_vgg = get_onnx_vectors(\"onnx_vgg16.onnx\", \"./pic/example.jpg\")\n","from milvus import *\n\n# create collections in Milvus\nmilvus.create_collection(resnet_collection_param)\nmilvus.create_collection(vgg_collection_param)\n\n# insert data to Milvus and return ids\nstatus, resnet_ids = milvus.insert(resnet_collection_name, resnet_vectors)\nstatus, vgg_ids = milvus.insert(vgg_collection_name, vgg_vectors)\n","import redis\ndef img_ids_to_redis(img_directory, res_ids):\n  for img, ids in zip(images, res_ids):\n    redis.set(ids, img)\n","# search in Milvus and return the similarly results with ids\ndef search_in_milvus(collection_name, search_vector):\n    status, results = milvus.search(collection_name, TOP_K, [search_vector])\n    print(status)\n    re_ids = [x.id for x in results[0]]\n    re_distance = [x.distance for x in results[0]]\n    return re_ids, re_distance\n    \n# get the images according the result ids\ndef get_sim_imgs(collection_name, search_vector):\n    ids, distance = search_in_milvus(collection_name, search_vector)\n    img = [red.get(i).decode(\"utf-8\") for i in ids]\n    return ids, distance, img\n"],"headingContent":"Combine AI Models for Image Search using ONNX and Milvus","anchorList":[{"label":"使用 ONNX 處理模型","href":"Process-Models-with-ONNX","type":2,"isActive":false},{"label":"使用模型擷取特徵向量","href":"Extract-Feature-Vectors-using-Models","type":2,"isActive":false},{"label":"儲存向量資料","href":"Store-Vector-Data","type":2,"isActive":false},{"label":"搜尋相似圖片","href":"Search-for-Similar-Images","type":2,"isActive":false},{"label":"參考資料","href":"References","type":2,"isActive":false}]}