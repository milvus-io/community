{"codeList":["from pymilvus import connections, utility, Collection, DataType, FieldSchema, CollectionSchema\n# Connect to Milvus\nconnections.connect(\n    alias=\"default\", \n    host='x.x.x.x', \n    port='19530'\n)\n# Create a collection with Strong Consistency level\npk_field = FieldSchema(\n    name=\"id\", \n    dtype=DataType.INT64, \n    is_primary=True, \n)\nvector_field = FieldSchema(\n    name=\"vector\", \n    dtype=DataType.FLOAT_VECTOR, \n    dim=2\n)\nschema = CollectionSchema(\n    fields=[pk_field, vector_field], \n    description=\"Test delete\"\n)\ncollection_name = \"test_delete\"\ncollection = Collection(\n    name=collection_name, \n    schema=schema, \n    using='default', \n    shards_num=2,\n    consistency_level=\"Strong\"\n)\n# Insert randomly generated vectors\nimport random\ndata = [\n    [i for i in range(100)],\n    [[random.random() for _ in range(2)] for _ in range(100)],\n]\ncollection.insert(data)\n# Query to make sure the entities to delete exist\ncollection.load()\nexpr = \"id in [2,4,6,8,10]\"\npre_del_res = collection.query(\n    expr,\n    output_fields = [\"id\", \"vector\"]\n)\nprint(pre_del_res)\n# Delete the entities with the previous expression\ncollection.delete(expr)\n# Query again to check if the deleted entities exist\npost_del_res = collection.query(\n    expr,\n    output_fields = [\"id\", \"vector\"]\n)\nprint(post_del_res)\n"],"headingContent":"How Milvus Deletes Streaming Data in a Distributed Cluster","anchorList":[{"label":"Utilisation","href":"Usage","type":2,"isActive":false},{"label":"Mise en œuvre","href":"Implementation","type":2,"isActive":false},{"label":"Quelles sont les prochaines étapes ?","href":"Whats-next","type":2,"isActive":false}]}