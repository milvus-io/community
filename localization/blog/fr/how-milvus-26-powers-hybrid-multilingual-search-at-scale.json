{"codeList":["from pymilvus import MilvusClient, DataType, Function, FunctionType\n\n# 1. Setup Milvus Client\nclient = MilvusClient(\"http://localhost:19530\")\nCOLLECTION_NAME = \"multilingual_test\"\nif client.has_collection(collection_name=COLLECTION_NAME):\n    client.drop_collection(collection_name=COLLECTION_NAME)\n","# 2. Define analyzers for multiple languages\n# These individual analyzer definitions will be reused by both methods.\nanalyzers = {\n    \"Japanese\": { \n        # Use lindera with japanese dict 'ipadic' \n        # and remove punctuation beacuse lindera tokenizer will remain punctuation\n        \"tokenizer\":{\n            \"type\": \"lindera\",\n            \"dict_kind\": \"ipadic\"\n        },\n        \"filter\": [\"removepunct\"]\n    },\n    \"English\": {\n        # Use build-in english analyzer\n        \"type\": \"english\",\n    },\n    \"default\": {\n        # use icu tokenizer as a fallback.\n        \"tokenizer\": \"icu\",\n    }\n}\n","# --- Option A: Using Multi-Language Analyzer ---\nprint(\"\\n--- Demonstrating Multi-Language Analyzer ---\")\n\n# 3A. reate a collection with the Multi Analyzer\n\nmutil_analyzer_params = {\n    \"by_field\": \"language\",\n    \"analyzers\": analyzers,\n}\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=False,\n)\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)# Apply our multi-language analyzer to the 'title' field\nschema.add_field(field_name=\"language\", datatype=DataType.VARCHAR, max_length=255, nullable = True)\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=25565, enable_analyzer=True, multi_analyzer_params = mutil_analyzer_params)\nschema.add_field(field_name=\"text_sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR) # Bm25 Sparse Vector\n\n# add bm25 function\ntext_bm25_function = Function(\n    name=\"text_bm25\",\n    function_type=FunctionType.BM25,\n    input_field_names=[\"text\"],\n    output_field_names=[\"text_sparse\"],\n)\nschema.add_function(text_bm25_function)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(\n    field_name=\"text_sparse\",\n    index_type=\"AUTOINDEX\", # Use auto index for BM25\n    metric_type=\"BM25\",\n)\n\nclient.create_collection(\n    collection_name=COLLECTION_NAME,\n    schema=schema,\n    index_params=index_params\n)\nprint(f\"Collection '{COLLECTION_NAME}' created successfully.\")\n","# 4A. Insert data for Multi-Language Analyzer and load collection# Insert English and Japanese movie titles, explicitly setting the 'language' field\nclient.insert(\n    collection_name=COLLECTION_NAME,\n    data=[\n        {\"text\": \"The Lord of the Rings\", \"language\": \"English\"},\n        {\"text\": \"Spirited Away\", \"language\": \"English\"},\n        {\"text\": \"千と千尋の神隠し\", \"language\": \"Japanese\"}, # This is \"Spirited Away\" in Japanese\n        {\"text\": \"君の名は。\", \"language\": \"Japanese\"}, # This is \"Your Name.\" in Japanese\n    ]\n)\nprint(f\"Inserted multilingual data into '{COLLECTION_NAME}'.\")\n\n# Load the collection into memory before searching\nclient.load_collection(collection_name=COLLECTION_NAME)\n","# 5A. Perform a full-text search with Multi-Language Analyzer# When searching, explicitly specify the analyzer to use for the query string.\nprint(\"\\n--- Search results for Multi-Language Analyzer ---\")\nresults_multi_jp = client.search(\n    collection_name=COLLECTION_NAME,\n    data=[\"神隠し\"],\n    limit=2,\n    output_fields=[\"text\"],\n    search_params={\"metric_type\": \"BM25\", \"analyzer_name\": \"Japanese\"}, # Specify Japanese analyzer for query\n    consistency_level = \"Strong\",\n)\nprint(\"\\nSearch results for '神隠し' (Multi-Language Analyzer):\")\nfor result in results_multi_jp[0]:\n    print(result)\n\nresults_multi_en = client.search(\n    collection_name=COLLECTION_NAME,\n    data=[\"Rings\"],\n    limit=2,\n    output_fields=[\"text\"],\n    search_params={\"metric_type\": \"BM25\", \"analyzer_name\": \"English\"}, # Specify English analyzer for query\n    consistency_level = \"Strong\",\n)\nprint(\"\\nSearch results for 'Rings' (Multi-Language Analyzer):\")\nfor result in results_multi_en[0]:\n    print(result)\n\nclient.drop_collection(collection_name=COLLECTION_NAME)\nprint(f\"Collection '{COLLECTION_NAME}' dropped.\")\n","# --- Option B: Using Language Identifier Tokenizer ---\nprint(\"\\n--- Demonstrating Language Identifier Tokenizer ---\")\n\n# 3A. create a collection with language identifier\nanalyzer_params_langid = {\n    \"tokenizer\": {\n        \"type\": \"language_identifier\",\n        \"analyzers\": analyzers # Referencing the analyzers defined in Step 2\n    },\n}\n\nschema_langid = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=False,\n)\nschema_langid.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\n# The 'language' field is not strictly needed by the analyzer itself here, as detection is automatic.# However, you might keep it for metadata purposes.\nschema_langid.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=25565, enable_analyzer=True, analyzer_params = analyzer_params_langid)\nschema_langid.add_field(field_name=\"text_sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR) # BM25 Sparse Vector# add bm25 function\ntext_bm25_function_langid = Function(\n    name=\"text_bm25\",\n    function_type=FunctionType.BM25,\n    input_field_names=[\"text\"],\n    output_field_names=[\"text_sparse\"],\n)\nschema_langid.add_function(text_bm25_function_langid)\n\nindex_params_langid = client.prepare_index_params()\nindex_params_langid.add_index(\n    field_name=\"text_sparse\",\n    index_type=\"AUTOINDEX\", # Use auto index for BM25\n    metric_type=\"BM25\",\n)\n\nclient.create_collection(\n    collection_name=COLLECTION_NAME,\n    schema=schema_langid,\n    index_params=index_params_langid\n)\nprint(f\"Collection '{COLLECTION_NAME}' created successfully with Language Identifier Tokenizer.\")\n","# 4B. Insert Data for Language Identifier Tokenizer and Load Collection\n# Insert English and Japanese movie titles. The language_identifier will detect the language.\nclient.insert(\n    collection_name=COLLECTION_NAME,\n    data=[\n        {\"text\": \"The Lord of the Rings\"},\n        {\"text\": \"Spirited Away\"},\n        {\"text\": \"千と千尋の神隠し\"}, \n        {\"text\": \"君の名は。\"},\n    ]\n)\nprint(f\"Inserted multilingual data into '{COLLECTION_NAME}'.\")\n\n# Load the collection into memory before searching\nclient.load_collection(collection_name=COLLECTION_NAME)\n","# 5B. Perform a full-text search with Language Identifier Tokenizer# No need to specify analyzer_name in search_params; it's detected automatically for the query.\nprint(\"\\n--- Search results for Language Identifier Tokenizer ---\")\nresults_langid_jp = client.search(\n    collection_name=COLLECTION_NAME,\n    data=[\"神隠し\"],\n    limit=2,\n    output_fields=[\"text\"],\n    search_params={\"metric_type\": \"BM25\"}, # Analyzer automatically determined by language_identifier\n    consistency_level = \"Strong\",\n)\nprint(\"\\nSearch results for '神隠し' (Language Identifier Tokenizer):\")\nfor result in results_langid_jp[0]:\n    print(result)\n\nresults_langid_en = client.search(\n    collection_name=COLLECTION_NAME,\n    data=[\"the Rings\"],\n    limit=2,\n    output_fields=[\"text\"],\n    search_params={\"metric_type\": \"BM25\"}, # Analyzer automatically determined by language_identifier\n    consistency_level = \"Strong\",\n)\nprint(\"\\nSearch results for 'the Rings' (Language Identifier Tokenizer):\")\nfor result in results_langid_en[0]:\n    print(result)\n\nclient.drop_collection(collection_name=COLLECTION_NAME)\nprint(f\"Collection '{COLLECTION_NAME}' dropped.\")\n"],"headingContent":"","anchorList":[{"label":"Introduction","href":"Introduction","type":2,"isActive":false},{"label":"Mais la recherche en texte intégral fonctionne différemment","href":"But-Full-Text-Search-Works-Differently","type":2,"isActive":false},{"label":"Le défi de la recherche multilingue en texte intégral","href":"The-Challenge-of-Multilingual-Full-Text-Search","type":2,"isActive":false},{"label":"Comment Milvus 2.6 permet une recherche plein texte multilingue robuste","href":"How-Milvus-26-Enables-Robust-Multilingual-Full-Text-Search","type":2,"isActive":false},{"label":"Voyez-le en action : Démonstration pratique","href":"See-It-in-Action-Hands-On-Demo","type":2,"isActive":false},{"label":"Conclusion","href":"Conclusion","type":2,"isActive":false}]}