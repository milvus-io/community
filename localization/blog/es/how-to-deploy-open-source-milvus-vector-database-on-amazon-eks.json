{"codeList":["auto.create.topics.enable=true\nmessage.max.bytes=10485880\nreplica.fetch.max.bytes=20971760\n","apiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n name: <cluster-name>\n region: <region-code>\n version: \"1.26\"\n\niam:\n withOIDC: true\n\n serviceAccounts:\n - metadata:\n     name: aws-load-balancer-controller\n     namespace: kube-system\n   wellKnownPolicies:\n     awsLoadBalancerController: true\n - metadata:\n     name: milvus-s3-access-sa\n     # if no namespace is set, \"default\" will be used;\n     # the namespace will be created if it doesn't exist already\n     namespace: milvus\n     labels: {aws-usage: \"milvus\"}\n   attachPolicyARNs:\n   - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n\n# Use existed VPC to create EKS.\n# If you don't config vpc subnets, eksctl will automatically create a brand new VPC\nvpc:\n subnets:\n   private:\n     us-west-2a: { id: <private-subnet-id1> }\n     us-west-2b: { id: <private-subnet-id2> }\n     us-west-2c: { id: <private-subnet-id3> }\n\nmanagedNodeGroups:\n - name: ng-1-milvus\n   labels: { role: milvus }\n   instanceType: m6i.2xlarge\n   desiredCapacity: 3\n   privateNetworking: true\n  \naddons:\n- name: vpc-cni # no version is specified so it deploys the default version\n attachPolicyARNs:\n   - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n- name: coredns\n version: latest # auto discovers the latest available\n- name: kube-proxy\n version: latest\n- name: aws-ebs-csi-driver\n wellKnownPolicies:      # add IAM and service account\n   ebsCSIController: true\n","eksctl create cluster -f eks_cluster.yaml\n","aws eks update-kubeconfig --region <region-code> --name <cluster-name>\n","kubectl get nodes -A -o wide\n","cat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n name: ebs-sc\n annotations:\n   storageclass.kubernetes.io/is-default-class: \"true\"\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nparameters:\n type: gp3\nEOF\n","kubectl patch storageclass gp2 -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n","helm repo add eks https://aws.github.io/eks-charts\nhelm repo update\n","helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\\n -n kube-system \\\n --set clusterName=<cluster-name> \\\n --set serviceAccount.create=false \\\n --set serviceAccount.name=aws-load-balancer-controller\n","kubectl get deployment -n kube-system aws-load-balancer-controller\n","NAME                           READY   UP-TO-DATE   AVAILABLE   AGE\naws-load-balancer-controller   2/2     2            2           12m\n","helm repo add milvus https://zilliztech.github.io/milvus-helm/\nhelm repo update\n","#####################################\n# Section 1\n#\n# Configure S3 as the Object Storage\n#####################################\n\n# Service account\n# - this service account are used by External S3 access\nserviceAccount:\n  create: false\n  name: milvus-s3-access-sa\n\n# Close in-cluster minio\nminio:\n  enabled: false\n\n# External S3\n# - these configs are only used when `externalS3.enabled` is true\nexternalS3:\n  enabled: true\n  host: \"s3.<region-code>.amazonaws.com\"\n  port: \"443\"\n  useSSL: true\n  bucketName: \"<bucket-name>\"\n  rootPath: \"<root-path>\"\n  useIAM: true\n  cloudProvider: \"aws\"\n  iamEndpoint: \"\"\n\n#####################################\n# Section 2\n#\n# Configure MSK as the Message Storage\n#####################################\n\n# Close in-cluster pulsar\npulsar:\n  enabled: false\n\n# External kafka\n# - these configs are only used when `externalKafka.enabled` is true\nexternalKafka:\n  enabled: true\n  brokerList: \"<broker-list>\"\n  securityProtocol: SASL_SSL\n  sasl:\n    mechanisms: SCRAM-SHA-512\n    username: \"<username>\"\n    password: \"<password>\"\n    \n#####################################\n# Section 3\n#\n# Expose the Milvus service to be accessed from outside the cluster (LoadBalancer service).\n# or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.\n#####################################\nservice:\n  type: LoadBalancer\n  port: 19530\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: external #AWS Load Balancer Controller fulfills services that has this annotation\n    service.beta.kubernetes.io/aws-load-balancer-name : milvus-service #User defined name given to AWS Network Load Balancer\n    service.beta.kubernetes.io/aws-load-balancer-scheme: internal # internal or internet-facing, later allowing for public access via internet\n    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip #The Pod IPs should be used as the target IPs (rather than the node IPs)\n    \n#####################################\n# Section 4\n#\n# Installing Attu the Milvus management GUI\n#####################################\nattu:\n  enabled: true\n  name: attu\n  ingress:\n    enabled: true\n    annotations:\n      kubernetes.io/ingress.class: alb # Annotation: set ALB ingress type\n      alb.ingress.kubernetes.io/scheme: internet-facing #Places the load balancer on public subnets\n      alb.ingress.kubernetes.io/target-type: ip #The Pod IPs should be used as the target IPs (rather than the node IPs)\n      alb.ingress.kubernetes.io/group.name: attu # Groups multiple Ingress resources\n    hosts:\n      -\n      \n#####################################\n# Section 5\n#\n# HA deployment of Milvus Core Components\n#####################################\nrootCoordinator:\n  replicas: 2\n  activeStandby:\n    enabled: true  # Enable active-standby when you set multiple replicas for root coordinator\n  resources:\n    limits:\n      cpu: 1\n      memory: 2Gi\nindexCoordinator:\n  replicas: 2\n  activeStandby:\n    enabled: true  # Enable active-standby when you set multiple replicas for index coordinator\n  resources:\n    limits:\n      cpu: \"0.5\"\n      memory: 0.5Gi\nqueryCoordinator:\n  replicas: 2\n  activeStandby:\n    enabled: true  # Enable active-standby when you set multiple replicas for query coordinator\n  resources:\n    limits:\n      cpu: \"0.5\"\n      memory: 0.5Gi\ndataCoordinator:\n  replicas: 2\n  activeStandby:\n    enabled: true  # Enable active-standby when you set multiple replicas for data coordinator\n  resources:\n    limits:\n      cpu: \"0.5\"\n      memory: 0.5Gi\nproxy:\n  replicas: 2\n  resources:\n    limits:\n      cpu: 1\n      memory: 4Gi\n\n#####################################\n# Section 6\n#\n# Milvus Resource Allocation\n#####################################\nqueryNode:\n  replicas: 1\n  resources:\n    limits:\n      cpu: 2\n      memory: 8Gi\ndataNode:\n  replicas: 1\n  resources:\n    limits:\n      cpu: 1\n      memory: 4Gi\nindexNode:\n  replicas: 1\n  resources:\n    limits:\n      cpu: 4\n      memory: 8Gi\n","helm install <demo> milvus/milvus -n milvus -f milvus_cluster.yaml\n","kubectl get deployment -n milvus\n","NAME                     READY   UP-TO-DATE   AVAILABLE   AGE\ndemo-milvus-attu         1/1     1            1           5m27s\ndemo-milvus-datacoord    2/2     2            2           5m27s\ndemo-milvus-datanode     1/1     1            1           5m27s\ndemo-milvus-indexcoord   2/2     2            2           5m27s\ndemo-milvus-indexnode    1/1     1            1           5m27s\ndemo-milvus-proxy        2/2     2            2           5m27s\ndemo-milvus-querycoord   2/2     2            2           5m27s\ndemo-milvus-querynode    1/1     1            1           5m27s\ndemo-milvus-rootcoord    2/2     2            2           5m27s\n","kubectl get svc -n milvus\n","NAME                     TYPE           CLUSTER-IP       EXTERNAL-IP                                               PORT(S)                          AGE\ndemo-etcd                ClusterIP      172.20.103.138   <none>                                                    2379/TCP,2380/TCP                62m\ndemo-etcd-headless       ClusterIP      None             <none>                                                    2379/TCP,2380/TCP                62m\ndemo-milvus              LoadBalancer   172.20.219.33    milvus-nlb-xxxx.elb.us-west-2.amazonaws.com               19530:31201/TCP,9091:31088/TCP   62m\ndemo-milvus-datacoord    ClusterIP      172.20.214.106   <none>                                                    13333/TCP,9091/TCP               62m\ndemo-milvus-datanode     ClusterIP      None             <none>                                                    9091/TCP                         62m\ndemo-milvus-indexcoord   ClusterIP      172.20.106.51    <none>                                                    31000/TCP,9091/TCP               62m\ndemo-milvus-indexnode    ClusterIP      None             <none>                                                    9091/TCP                         62m\ndemo-milvus-querycoord   ClusterIP      172.20.136.213   <none>                                                    19531/TCP,9091/TCP               62m\ndemo-milvus-querynode    ClusterIP      None             <none>                                                    9091/TCP                         62m\ndemo-milvus-rootcoord    ClusterIP      172.20.173.98    <none>                                                    53100/TCP,9091/TCP               62m\n","kubectl get ingress -n milvus\n","NAME            CLASS   HOSTS   ADDRESS                                     PORTS   AGE\ndemo-milvus-attu   <none>   *       k8s-attu-xxxx.us-west-2.elb.amazonaws.com   80      27s\n","wget https://raw.githubusercontent.com/milvus-io/pymilvus/master/examples/hello_milvus.py\n","print(fmt.format(\"start connecting to Milvus\"))\nconnections.connect(\"default\", host=\"milvus-nlb-xxx.elb.us-west-2.amazonaws.com\", port=\"19530\")\n","python3 hello_milvus.py\n","=== start connecting to Milvus     ===\nDoes collection hello_milvus exist in Milvus: False\n=== Create collection `hello_milvus` ===\n=== Start inserting entities       ===\nNumber of entities in Milvus: 3000\n=== Start Creating index IVF_FLAT  ===\n=== Start loading                  ===\n"],"headingContent":"","anchorList":[{"label":"Visión general de las incrustaciones vectoriales y las bases de datos vectoriales","href":"An-Overview-of-Vector-Embeddings-and-Vector-Databases","type":2,"isActive":false},{"label":"¿Qué es Milvus?","href":"What-is-Milvus","type":2,"isActive":false},{"label":"Implementación de Milvus en AWS EKS","href":"Deploying-Milvus-on-AWS-EKS","type":2,"isActive":false},{"label":"Probar la base de datos vectorial Milvus","href":"Testing-the-Milvus-vector-database","type":2,"isActive":false},{"label":"Conclusión","href":"Conclusion","type":2,"isActive":false},{"label":"Referencias","href":"References","type":2,"isActive":false}]}