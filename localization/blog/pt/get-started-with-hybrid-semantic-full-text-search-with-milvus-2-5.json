{"codeList":["pip install -U pymilvus[model]\n","from pymilvus import MilvusClient, DataType, Function, FunctionType, model\n","client = MilvusClient(uri=\"http://localhost:19530\")\n\nschema = client.create_schema()\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True, auto_id=True)\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=1000, enable_analyzer=True)\nschema.add_field(field_name=\"dense\", datatype=DataType.FLOAT_VECTOR, dim=768),\nschema.add_field(field_name=\"sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR)\n","{'auto_id': False, 'description': '', 'fields': [{'name': 'id', 'description': '', 'type': <DataType.INT64: 5>, 'is_primary': True, 'auto_id': True}, {'name': 'text', 'description': '', 'type': <DataType.VARCHAR: 21>, 'params': {'max_length': 1000, 'enable_analyzer': True}}, {'name': 'dense', 'description': '', 'type': <DataType.FLOAT_VECTOR: 101>, 'params': {'dim': 768}}, {'name': 'sparse', 'description': '', 'type': <DataType.SPARSE_FLOAT_VECTOR: 104>}], 'enable_dynamic_field': False}\n","bm25_function = Function(\n    name=\"text_bm25_emb\", # Function name\n    input_field_names=[\"text\"], # Name of the VARCHAR field containing raw text data\n    output_field_names=[\"sparse\"], # Name of the SPARSE_FLOAT_VECTOR field reserved to store generated embeddings\n    function_type=FunctionType.BM25,\n)\n\nschema.add_function(bm25_function)\n","{'auto_id': False, 'description': '', 'fields': [{'name': 'id', 'description': '', 'type': <DataType.INT64: 5>, 'is_primary': True, 'auto_id': True}, {'name': 'text', 'description': '', 'type': <DataType.VARCHAR: 21>, 'params': {'max_length': 1000, 'enable_analyzer': True}}, {'name': 'dense', 'description': '', 'type': <DataType.FLOAT_VECTOR: 101>, 'params': {'dim': 768}}, {'name': 'sparse', 'description': '', 'type': <DataType.SPARSE_FLOAT_VECTOR: 104>, 'is_function_output': True}], 'enable_dynamic_field': False, 'functions': [{'name': 'text_bm25_emb', 'description': '', 'type': <FunctionType.BM25: 1>, 'input_field_names': ['text'], 'output_field_names': ['sparse'], 'params': {}}]}\n","embedding_fn = model.DefaultEmbeddingFunction()\n","index_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"dense\",\n    index_type=\"AUTOINDEX\", \n    metric_type=\"COSINE\"\n)\n\nindex_params.add_index(\n    field_name=\"sparse\",\n    index_type=\"SPARSE_INVERTED_INDEX\", \n    metric_type=\"BM25\"\n)\n","client.drop_collection('demo')\nclient.list_collections()\n","[]\n","client.create_collection(\n    collection_name='demo', \n    schema=schema, \n    index_params=index_params\n)\n\nclient.list_collections()\n","['demo']\n","docs = [\n    'information retrieval is a field of study.',\n    'information retrieval focuses on finding relevant information in large datasets.',\n    'data mining and information retrieval overlap in research.'\n]\n\nembeddings = embedding_fn(docs)\n\nclient.insert('demo', [\n    {'text': doc, 'dense': vec} for doc, vec in zip(docs, embeddings)\n])\n","{'insert_count': 3, 'ids': [454387371651630485, 454387371651630486, 454387371651630487], 'cost': 0}\n","search_params = {\n    'params': {'drop_ratio_search': 0.2},\n}\n\nresults = client.search(\n    collection_name='demo', \n    data=['whats the focus of information retrieval?'],\n    output_fields=['text'],\n    anns_field='sparse',\n    limit=3,\n    search_params=search_params\n)\n","for hit in results[0]:\n    print(hit)\n","{'id': 454387371651630485, 'distance': 1.3352930545806885, 'entity': {'text': 'information retrieval is a field of study.'}}\n{'id': 454387371651630486, 'distance': 0.29726022481918335, 'entity': {'text': 'information retrieval focuses on finding relevant information in large datasets.'}}\n{'id': 454387371651630487, 'distance': 0.2715056240558624, 'entity': {'text': 'data mining and information retrieval overlap in research.'}}\n","from pymilvus import AnnSearchRequest, RRFRanker\nquery = 'whats the focus of information retrieval?'\nquery_dense_vector = embedding_fn([query])\n\nsearch_param_1 = {\n    \"data\": query_dense_vector,\n    \"anns_field\": \"dense\",\n    \"param\": {\n        \"metric_type\": \"COSINE\",\n    },\n    \"limit\": 3\n}\nrequest_1 = AnnSearchRequest(**search_param_1)\n\nsearch_param_2 = {\n    \"data\": [query],\n    \"anns_field\": \"sparse\",\n    \"param\": {\n        \"metric_type\": \"BM25\",\n        \"params\": {\"drop_ratio_build\": 0.0}\n    },\n    \"limit\": 3\n}\nrequest_2 = AnnSearchRequest(**search_param_2)\n\nreqs = [request_1, request_2]\n","ranker = RRFRanker()\n\nres = client.hybrid_search(\n    collection_name=\"demo\",\n    output_fields=['text'],\n    reqs=reqs,\n    ranker=ranker,\n    limit=3\n)\nfor hit in res[0]:\n    print(hit)\n","{'id': 454387371651630485, 'distance': 0.032786883413791656, 'entity': {'text': 'information retrieval is a field of study.'}}\n{'id': 454387371651630486, 'distance': 0.032258063554763794, 'entity': {'text': 'information retrieval focuses on finding relevant information in large datasets.'}}\n{'id': 454387371651630487, 'distance': 0.0317460335791111, 'entity': {'text': 'data mining and information retrieval overlap in research.'}}\n"],"headingContent":"","anchorList":[{"label":"Requisitos","href":"Requirement","type":2,"isActive":false},{"label":"Construir o esquema de dados e os índices de pesquisa","href":"Building-the-Data-Schema-and-Search-Indices","type":2,"isActive":false},{"label":"Inserção de dados e pesquisa de texto integral","href":"Inserting-Data-and-Performing-Full-Text-Search","type":2,"isActive":false},{"label":"Realização de pesquisa híbrida semântica e de texto integral","href":"Performing-Hybrid-Semantic-and-Full-Text-Search","type":2,"isActive":false},{"label":"Resumo","href":"Summary","type":2,"isActive":false}]}