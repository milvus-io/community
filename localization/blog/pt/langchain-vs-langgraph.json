{"codeList":["# LangChain LCEL orchestration example\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n\nprompt = ChatPromptTemplate.from_template(\"Please answer the following question: {question}\")\nmodel = ChatOpenAI()\n\n# LCEL chain orchestration\nchain = prompt | model\n\n# Run the chain\nresult = chain.invoke({\"question\": \"What is artificial intelligence?\"})\n","# LangGraph graph structure definition\nfrom langgraph.graph import StateGraph\nfrom typing import TypedDict\n\nclass State(TypedDict):\n    messages: list\n    current_step: str\n\ndef node_a(state: State) -> State:\n    return {\"messages\": state[\"messages\"] + [\"Processing A\"], \"current_step\": \"A\"}\n\ndef node_b(state: State) -> State:\n    return {\"messages\": state[\"messages\"] + [\"Processing B\"], \"current_step\": \"B\"}\n\ngraph = StateGraph(State)\ngraph.add_node(\"node_a\", node_a)\ngraph.add_node(\"node_b\", node_b)\ngraph.add_edge(\"node_a\", \"node_b\")\n","# Implementing simple text translation using LCEL\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n\nprompt = ChatPromptTemplate.from_template(\"Translate the following text to English: {text}\")\nmodel = ChatOpenAI()\nchain = prompt | model\n\nresult = chain.invoke({\"text\": \"Hello, World!\"})\n","# Simplified Agent system example\ndef agent(state):\n    messages = state[\"messages\"]\n    # Agent thinks and decides next action\n    action = decide_action(messages)\n    return {\"action\": action, \"messages\": messages}\n\ndef tool_executor(state):\n    # Execute tool calls\n    action = state[\"action\"]\n    result = execute_tool(action)\n    return {\"result\": result, \"messages\": state[\"messages\"] + [result]}\n\n# Build Agent graph\ngraph = StateGraph()\ngraph.add_node(\"agent\", agent)\ngraph.add_node(\"tool_executor\", tool_executor)\ngraph.add_edge(\"agent\", \"tool_executor\")\ngraph.add_edge(\"tool_executor\", \"agent\")\n"],"headingContent":"","anchorList":[{"label":"LangChain: A sua biblioteca de componentes e a potência de orquestração LCEL","href":"LangChain-Your-Component-Library-and-LCEL-Orchestration-Powerhouse","type":2,"isActive":false},{"label":"LangGraph: Sua solução ideal para sistemas de agentes com estado","href":"LangGraph-Your-Go-To-for-Stateful-Agent-Systems","type":2,"isActive":false},{"label":"LangChain vs LangGraph: Mergulho técnico profundo","href":"LangChain-vs-LangGraph-Technical-Deep-Dive","type":2,"isActive":false},{"label":"Casos de uso no mundo real: Quando usar cada um","href":"Real-World-Use-Cases-When-to-Use-Each","type":2,"isActive":false},{"label":"Conclusão","href":"Conclusion","type":2,"isActive":false}]}