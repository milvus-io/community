{"codeList":["git clone https://github.com/topikachu/milvus-py-otel\ncd milvus-py-otel\n","docker-compose up -d\n","pip install -r requirements.txt\npython example.py\n","version: '3.7'\nServices:\n# Milvus - configured to send traces to Jaeger\n  milvus:\n    image: milvusdb/milvus:v2.5.11\n    command: [\"milvus\", \"run\", \"standalone\"]\n    environment:\n      - ETCD_USE_EMBED=true\n      - ETCD_DATA_DIR=/var/lib/milvus/etcd\n      - ETCD_CONFIG_PATH=/milvus/configs/embedEtcd.yaml\n      - COMMON_STORAGETYPE=local\n    volumes:\n      - ./embedEtcd.yaml:/milvus/configs/embedEtcd.yaml\n      - ./milvus.yaml:/milvus/configs/milvus.yaml\n    ports:\n      - \"19530:19530\"\n      - \"9091:9091\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]\n      interval: 30s\n      start_period: 90s\n      timeout: 20s\n      retries: 3\n    security_opt:\n      - seccomp:unconfined\n    depends_on:\n      - jaeger\n\n# Jaeger - starts first since Milvus depends on it\n  jaeger:\n    image: jaegertracing/all-in-one:1.46.0\n    ports:\n      - \"16686:16686\"  # Jaeger UI\n      - \"4317:4317\"    # OTLP gRPC receiver\n      - \"4318:4318\"    # OTLP HTTP receiver\n      - \"5778:5778\"    # Jaeger agent configs\n      - \"9411:9411\"    # Zipkin compatible endpoint\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n","# OpenTelemetry tracing configuration\ntrace:\n  exporter: otlp           # Use OpenTelemetry Protocol\n  sampleFraction: 1.0      # Trace 100% of requests (reduce for production)\n  otlp:\n    endpoint: jaeger:4317  # Jaeger's OTLP gRPC endpoint\n    method: grpc          # Use gRPC protocol\n    secure: false         # No TLS (use true in production)\n    initTimeoutSeconds: 10\n","docker-compose up -d\n","# OpenTelemetry core\nopentelemetry-api==1.33.1\nopentelemetry-sdk==1.33.1\n# OTLP exporters\nopentelemetry-exporter-otlp==1.33.1\nopentelemetry-exporter-otlp-proto-grpc==1.33.1\n# Automatic gRPC instrumentation\nopentelemetry-instrumentation-grpc==0.54b1\n# Milvus client\npymilvus==2.5.9\n","pip install -r requirements.txt\n","import os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.instrumentation.grpc import GrpcInstrumentorClient\n\n# Set OTEL environment variables (you can also load them from external configs)\nos.environ['OTEL_EXPORTER_OTLP_ENDPOINT'] = 'http://localhost:4317'\nos.environ['OTEL_SERVICE_NAME'] = 'milvus-client'\n\n# Define service metadata\nresource = Resource.create({\n    \"service.name\": \"milvus-client\",\n    \"application\": \"milvus-otel-test\"\n})\n\n# Initialize tracer and export processor\ntrace.set_tracer_provider(\n    TracerProvider(resource=resource)\n)\notlp_exporter = OTLPSpanExporter()\nspan_processor = BatchSpanProcessor(otlp_exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\n# Enable automatic instrumentation for gRPC clients\ngrpc_client_instrumentor = GrpcInstrumentorClient()\ngrpc_client_instrumentor.instrument()\n\n# Acquire tracer\ntracer = trace.get_tracer(__name__)\n","from pymilvus import MilvusClient\nfrom opentelemetry import trace\n\nwith tracer.start_as_current_span(\"test_milvus_otel\"):\n    milvus_client = MilvusClient(\n        uri=\"http://localhost:19530\",\n    )\n    collection_name = \"quick_setup\"\n\n    # Drop collection if it exists\n    if milvus_client.has_collection(collection_name):\n        milvus_client.drop_collection(collection_name)\n\n    # Create collection\n    milvus_client.create_collection(\n        collection_name=collection_name,\n        dimension=5\n    )\n\n    # Add additional operations here\n    \n    milvus_client.close()\n"],"headingContent":"","anchorList":[{"label":"소개","href":"Introduction","type":2,"isActive":false},{"label":"구축할 내용","href":"What-Well-Build","type":2,"isActive":false},{"label":"빠른 시작(5분)","href":"Quick-Start-5-Minutes","type":2,"isActive":false},{"label":"환경 설정","href":"Environment-Setup","type":2,"isActive":false},{"label":"Milvus 및 Jaeger 설정하기","href":"Setting-Up-Milvus-and-Jaeger","type":2,"isActive":false},{"label":"Python 클라이언트 설정 및 종속성","href":"Python-Client-Setup-and-Dependencies","type":2,"isActive":false},{"label":"Python에서 OpenTelemetry 초기화하기","href":"Initializing-OpenTelemetry-in-Python","type":2,"isActive":false},{"label":"추적을 사용한 완전한 Milvus Python 예제 만들기","href":"Complete-Milvus-Python-Example-with-Tracing","type":2,"isActive":false},{"label":"추적 출력 보기","href":"Viewing-Trace-Output","type":2,"isActive":false},{"label":"다른 언어의 예제","href":"Examples-in-Other-Languages","type":2,"isActive":false},{"label":"요약","href":"Summary","type":2,"isActive":false},{"label":"자세히 알아보기","href":"Learn-More","type":2,"isActive":false}]}