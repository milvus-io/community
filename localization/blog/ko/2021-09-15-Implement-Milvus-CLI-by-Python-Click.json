{"codeList":["import click\nfrom utils import PyOrm\n\n@click.group(no_args_is_help=False, add_help_option=False, invoke_without_command=True)\n@click.pass_context\ndef cli(ctx):\n    \"\"\"Milvus CLI\"\"\"\n    ctx.obj = PyOrm() # PyOrm is a util class which wraps the milvus python SDK. You can pass any class instance here. Any command function passed by @click.obj can call it.\n\nif __name__ == '__main__':\n    cli()\n","# Print the help message of specified command.\ndef print_help_msg(command):\n    with click.Context(command) as ctx:\n        click.echo(command.get_help(ctx))\n\n\n# Use @cli.command() to create a sub command of cli.\n@cli.command()\ndef help():\n    \"\"\"Show help messages.\"\"\"\n    # Print help message of cli.\n    click.echo(print_help_msg(cli))\n","$ python milvus_cli/scripts/milvus_cli.py help\n","@cli.group('list', no_args_is_help=False)\n@click.pass_obj\ndef listDetails(obj):\n    \"\"\"List collections, partitions and indexes.\"\"\"\n    pass\n","@listDetails.command()\n@click.option('--timeout', 'timeout', help=\"[Optional] - An optional duration of time in seconds to allow for the RPC. When timeout is set to None, client waits until server response or error occur.\", default=None)\n@click.option('--show-loaded', 'showLoaded', help=\"[Optional] - Only show loaded collections.\", default=False)\n@click.pass_obj\ndef collections(obj, timeout, showLoaded):\n    \"\"\"List all collections.\"\"\"\n    try:\n        obj.checkConnection()\n        click.echo(obj.listCollections(timeout, showLoaded))\n    except Exception as e:\n        click.echo(message=e, err=True)\n\n\n@listDetails.command()\n@click.option('-c', '--collection', 'collection', help='The name of collection.', default='')\n@click.pass_obj\ndef partitions(obj, collection):\n    \"\"\"List all partitions of the specified collection.\"\"\"\n    try:\n        obj.checkConnection()\n        validateParamsByCustomFunc(\n            obj.getTargetCollection, 'Collection Name Error!', collection)\n        click.echo(obj.listPartitions(collection))\n    except Exception as e:\n        click.echo(message=e, err=True)\n","@cli.command(no_args_is_help=False)\n@click.option('-a', '--alias', 'alias', help=\"Milvus link alias name, default is `default`.\", default='default', type=str)\n@click.option('-h', '--host', 'host', help=\"Host name, default is `127.0.0.1`.\", default='127.0.0.1', type=str)\n@click.option('-p', '--port', 'port', help=\"Port, default is `19530`.\", default=19530, type=int)\n@click.pass_obj\ndef connect(obj, alias, host, port):\n    pass\n","@createDetails.command('collection')\n@click.option('-c', '--collection-name', 'collectionName', help='Collection name to be created.', default='')\n@click.option('-p', '--schema-primary-field', 'primaryField', help='Primary field name.', default='')\n@click.option('-a', '--schema-auto-id', 'autoId', help='Enable auto id.', default=False, is_flag=True)\n@click.pass_obj\ndef createCollection(obj, collectionName, primaryField, autoId, description, fields):\n    pass\n","@createDetails.command('collection')\n@click.argument('collectionName')\n@click.option('-p', '--schema-primary-field', 'primaryField', help='Primary field name.', default='')\n@click.option('-a', '--schema-auto-id', 'autoId', help='Enable auto id.', default=False, is_flag=True)\n@click.pass_obj\ndef createCollection(obj, collectionName, primaryField, autoId, description, fields):\n    pass\n","@cli.command(no_args_is_help=False)\n@click.option('-a', '--alias', 'alias', help=\"Milvus link alias name, default is `default`.\", default='default', type=str)\n@click.option('-h', '--host', 'host', help=\"Host name, default is `127.0.0.1`.\", default='127.0.0.1', type=str)\n@click.option('-p', '--port', 'port', help=\"Port, default is `19530`.\", default=19530, type=int)\n@click.pass_obj\ndef connect(obj, alias, host, port):\n    \"\"\"\n    Connect to Milvus.\n\n    Example:\n\n        milvus_cli > connect -h 127.0.0.1 -p 19530 -a default\n    \"\"\"\n    try:\n        obj.connect(alias, host, port)\n    except Exception as e:\n        click.echo(message=e, err=True)\n    else:\n        click.echo(\"Connect Milvus successfully!\")\n        click.echo(obj.showConnection(alias))\n","milvus_cli > connect --help\nUsage: milvus_cli.py connect [OPTIONS]\n\n  Connect to Milvus.\n\n  Example:\n\n      milvus_cli > connect -h 127.0.0.1 -p 19530 -a default\n\nOptions:\n  -a, --alias TEXT    Milvus link alias name, default is `default`.\n  -h, --host TEXT     Host name, default is `127.0.0.1`.\n  -p, --port INTEGER  Port, default is `19530`.\n  --help              Show this message and exit.\n","@deleteSth.command('collection')\n@click.option('-c', '--collection', 'collectionName', help='The name of collection to be deleted.', default='')\n@click.option('-t', '--timeout', 'timeout', help='An optional duration of time in seconds to allow for the RPC. If timeout is set to None, the client keeps waiting until the server responds or an error occurs.', default=None, type=int)\n@click.pass_obj\ndef deleteCollection(obj, collectionName, timeout):\n    \"\"\"\n    Drops the collection together with its index files.\n\n    Example:\n\n        milvus_cli > delete collection -c car\n    \"\"\"\n    click.echo(\n        \"Warning!\\nYou are trying to delete the collection with data. This action cannot be undone!\\n\")\n    if not click.confirm('Do you want to continue?'):\n        return\n    pass\n","@cli.command()\n@click.pass_obj\ndef query(obj):\n    \"\"\"\n    Query with a set of criteria, and results in a list of records that match the query exactly.\n    \"\"\"\n    collectionName = click.prompt(\n        'Collection name', type=click.Choice(obj._list_collection_names()))\n    expr = click.prompt('The query expression(field_name in [x,y])')\n    partitionNames = click.prompt(\n        f'The names of partitions to search(split by \",\" if multiple) {obj._list_partition_names(collectionName)}', default='')\n    outputFields = click.prompt(\n        f'Fields to return(split by \",\" if multiple) {obj._list_field_names(collectionName)}', default='')\n    timeout = click.prompt('timeout', default='')\n    pass\n","collectionName = click.prompt(\n        'Collection name', type=click.Choice(['collection_1', 'collection_2']))\n","@cli.command()\ndef clear():\n    \"\"\"Clear screen.\"\"\"\n    click.clear()\n","def runCliPrompt():\n    while True:\n        astr = input('milvus_cli > ')\n        try:\n            cli(astr.split())\n        except SystemExit:\n            # trap argparse error message\n            # print('error', SystemExit)\n            continue\n\n\nif __name__ == '__main__':\n    runCliPrompt()\n","def runCliPrompt():\n    while True:\n            import readline\n        readline.set_completer_delims(' \\t\\n;')\n        astr = input('milvus_cli > ')\n        try:\n            cli(astr.split())\n        except SystemExit:\n            # trap argparse error message\n            # print('error', SystemExit)\n            continue\n","@cli.command('exit')\ndef quitapp():\n    \"\"\"Exit the CLI.\"\"\"\n    global quitapp\n    quitapp = True\n\n\nquitapp = False  # global flag\n\n\ndef runCliPrompt():\n    while not quitapp:\n            import readline\n        readline.set_completer_delims(' \\t\\n;')\n        astr = input('milvus_cli > ')\n        try:\n            cli(astr.split())\n        except SystemExit:\n            # trap argparse error message\n            # print('error', SystemExit)\n            continue\n","def runCliPrompt():\n    try:\n        while not quitapp:\n            import readline\n            readline.set_completer_delims(' \\t\\n;')\n            astr = input('milvus_cli > ')\n            try:\n                cli(astr.split())\n            except SystemExit:\n                # trap argparse error message\n                # print('error', SystemExit)\n                continue\n    except KeyboardInterrupt:\n        sys.exit(0)\n","milvus_cli >\nmilvus_cli > connect\n+-------+-----------+\n| Host  | 127.0.0.1 |\n| Port  |   19530   |\n| Alias |  default  |\n+-------+-----------+\n\nmilvus_cli > help\nUsage:  [OPTIONS] COMMAND [ARGS]...\n\n  Milvus CLI\n\nCommands:\n  clear     Clear screen.\n  connect   Connect to Milvus.\n  create    Create collection, partition and index.\n  delete    Delete specified collection, partition and index.\n  describe  Describe collection or partition.\n  exit      Exit the CLI.\n  help      Show help messages.\n  import    Import data from csv file with headers and insert into target...\n  list      List collections, partitions and indexes.\n  load      Load specified collection.\n  query     Query with a set of criteria, and results in a list of...\n  release   Release specified collection.\n  search    Conducts a vector similarity search with an optional boolean...\n  show      Show connection, loading_progress and index_progress.\n  version   Get Milvus CLI version.\n\nmilvus_cli > exit\n","class Completer(object):\n    RE_SPACE = re.compile('.*\\s+$', re.M)\n    CMDS_DICT = {\n        'clear': [],\n        'connect': [],\n        'create': ['collection', 'partition', 'index'],\n        'delete': ['collection', 'partition', 'index'],\n        'describe': ['collection', 'partition'],\n        'exit': [],\n        'help': [],\n        'import': [],\n        'list': ['collections', 'partitions', 'indexes'],\n        'load': [],\n        'query': [],\n        'release': [],\n        'search': [],\n        'show': ['connection', 'index_progress', 'loading_progress'],\n        'version': [],\n    }\n\n    def __init__(self) -> None:\n        super().__init__()\n        self.COMMANDS = list(self.CMDS_DICT.keys())\n        self.createCompleteFuncs(self.CMDS_DICT)\n\n    def createCompleteFuncs(self, cmdDict):\n        for cmd in cmdDict:\n            sub_cmds = cmdDict[cmd]\n            complete_example = self.makeComplete(cmd, sub_cmds)\n            setattr(self, 'complete_%s' % cmd, complete_example)\n\n    def makeComplete(self, cmd, sub_cmds):\n        def f_complete(args):\n            f\"Completions for the {cmd} command.\"\n            if not args:\n                return self._complete_path('.')\n            if len(args) <= 1 and not cmd == 'import':\n                return self._complete_2nd_level(sub_cmds, args[-1])\n            return self._complete_path(args[-1])\n        return f_complete\n\n    def _listdir(self, root):\n        \"List directory 'root' appending the path separator to subdirs.\"\n        res = []\n        for name in os.listdir(root):\n            path = os.path.join(root, name)\n            if os.path.isdir(path):\n                name += os.sep\n            res.append(name)\n        return res\n\n    def _complete_path(self, path=None):\n        \"Perform completion of filesystem path.\"\n        if not path:\n            return self._listdir('.')\n        dirname, rest = os.path.split(path)\n        tmp = dirname if dirname else '.'\n        res = [os.path.join(dirname, p)\n               for p in self._listdir(tmp) if p.startswith(rest)]\n        # more than one match, or single match which does not exist (typo)\n        if len(res) > 1 or not os.path.exists(path):\n            return res\n        # resolved to a single directory, so return list of files below it\n        if os.path.isdir(path):\n            return [os.path.join(path, p) for p in self._listdir(path)]\n        # exact file match terminates this completion\n        return [path + ' ']\n\n    def _complete_2nd_level(self, SUB_COMMANDS=[], cmd=None):\n        if not cmd:\n            return [c + ' ' for c in SUB_COMMANDS]\n        res = [c for c in SUB_COMMANDS if c.startswith(cmd)]\n        if len(res) > 1 or not (cmd in SUB_COMMANDS):\n            return res\n        return [cmd + ' ']\n\n    def complete(self, text, state):\n        \"Generic readline completion entry point.\"\n        buffer = readline.get_line_buffer()\n        line = readline.get_line_buffer().split()\n        # show all commands\n        if not line:\n            return [c + ' ' for c in self.COMMANDS][state]\n        # account for last argument ending in a space\n        if self.RE_SPACE.match(buffer):\n            line.append('')\n        # resolve command to the implementation function\n        cmd = line[0].strip()\n        if cmd in self.COMMANDS:\n            impl = getattr(self, 'complete_%s' % cmd)\n            args = line[1:]\n            if args:\n                return (impl(args) + [None])[state]\n            return [cmd + ' '][state]\n        results = [\n            c + ' ' for c in self.COMMANDS if c.startswith(cmd)] + [None]\n        return results[state]\n","comp = Completer()\n\n\ndef runCliPrompt():\n    try:\n        while not quitapp:\n            import readline\n            readline.set_completer_delims(' \\t\\n;')\n            readline.parse_and_bind(\"tab: complete\")\n            readline.set_completer(comp.complete)\n            astr = input('milvus_cli > ')\n            try:\n                cli(astr.split())\n            except SystemExit:\n                # trap argparse error message\n                # print('error', SystemExit)\n                continue\n    except KeyboardInterrupt:\n        sys.exit(0)\n","def runCliPrompt():\n    args = sys.argv\n    if args and (args[-1] == '--version'):\n        print(f\"Milvus Cli v{getPackageVersion()}\")\n        return\n    try:\n        while not quitapp:\n            import readline\n            readline.set_completer_delims(' \\t\\n;')\n            readline.parse_and_bind(\"tab: complete\")\n            readline.set_completer(comp.complete)\n            astr = input('milvus_cli > ')\n            try:\n                cli(astr.split())\n            except SystemExit:\n                # trap argparse error message\n                # print('error', SystemExit)\n                continue\n    except KeyboardInterrupt:\n        sys.exit(0)\n\n\nif __name__ == '__main__':\n    runCliPrompt()\n","package_example/\n├── LICENSE\n├── README.md\n├── setup.py\n├── src/\n│   ├── __init__.py\n│   ├── main.py\n│   └── scripts/\n│       ├── __init__.py\n│       └── example.py\n└── tests/\n","Milvus_cli/\n├── LICENSE\n├── README.md\n├── setup.py\n├── milvus_cli/\n│   ├── __init__.py\n│   ├── main.py\n│   ├── utils.py\n│   └── scripts/\n│       ├── __init__.py\n│       └── milvus_cli.py\n└── dist/\n","import sys\nimport os\nimport click\nfrom utils import PyOrm, Completer\n\n\npass_context = click.make_pass_decorator(PyOrm, ensure=True)\n\n\n@click.group(no_args_is_help=False, add_help_option=False, invoke_without_command=True)\n@click.pass_context\ndef cli(ctx):\n    \"\"\"Milvus CLI\"\"\"\n    ctx.obj = PyOrm()\n\n\"\"\"\n...\nHere your code.\n...\n\"\"\"\n\n@cli.command('exit')\ndef quitapp():\n    \"\"\"Exit the CLI.\"\"\"\n    global quitapp\n    quitapp = True\n\n\nquitapp = False  # global flag\ncomp = Completer()\n\n\ndef runCliPrompt():\n    args = sys.argv\n    if args and (args[-1] == '--version'):\n        print(f\"Milvus Cli v{getPackageVersion()}\")\n        return\n    try:\n        while not quitapp:\n            import readline\n            readline.set_completer_delims(' \\t\\n;')\n            readline.parse_and_bind(\"tab: complete\")\n            readline.set_completer(comp.complete)\n            astr = input('milvus_cli > ')\n            try:\n                cli(astr.split())\n            except SystemExit:\n                # trap argparse error message\n                # print('error', SystemExit)\n                continue\n            except Exception as e:\n                click.echo(\n                    message=f\"Error occurred!\\n{str(e)}\", err=True)\n    except KeyboardInterrupt:\n        sys.exit(0)\n\n\nif __name__ == '__main__':\n    runCliPrompt()\n","from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='milvus_cli',\n    version='0.1.6',\n    author='Milvus Team',\n    author_email='milvus-team@zilliz.com',\n    url='https://github.com/milvus-io/milvus_cli',\n    description='CLI for Milvus',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    license='Apache-2.0',\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        'Click==8.0.1',\n        'pymilvus==2.0.0rc5',\n        'tabulate==0.8.9'\n    ],\n    entry_points={\n        'console_scripts': [\n            'milvus_cli = milvus_cli.scripts.milvus_cli:runCliPrompt',\n        ],\n    },\n    python_requires='>=3.8'\n)\n","dist/\n  example_package_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl\n  example_package_YOUR_USERNAME_HERE-0.0.1.tar.gz\n","# This is a basic workflow to help you get started with Actions\n\nname: Update the release's assets after it published\n\n# Controls when the workflow will run\non:\n  release:\n    # The workflow will run after release published\n    types: [published]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n          architecture: 'x64'\n      - name: Install pypa/build\n        run: >-\n          python -m\n          pip install\n          build\n          --user\n      - name: Clean dist/\n        run: |\n          sudo rm -fr dist/*\n      - name: Build a binary wheel and a source tarball\n        run: >-\n          python -m\n          build\n          --sdist\n          --wheel\n          --outdir dist/\n          .\n      # Update target github release's assets\n      - name: Update assets\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, 'refs/tags/')\n        with:\n          files: ./dist/*\n      - name: Publish distribution 📦 to Test PyPI\n        if: contains(github.ref, 'beta') && startsWith(github.ref, 'refs/tags')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n          packages_dir: dist/\n          verify_metadata: false\n"],"headingContent":"Implement Milvus CLI by Python Click","anchorList":[{"label":"개요","href":"Overview","type":2,"isActive":false},{"label":"그룹 명령","href":"Group-commands","type":2,"isActive":false},{"label":"명령 사용자 지정","href":"Custom-a-command","type":2,"isActive":false},{"label":"사용자가 입력할 수 있는 프롬프트 CLI 구현하기","href":"Implement-prompt-CLI-for-user-to-input","type":2,"isActive":false},{"label":"수동으로 자동 완성 구현하기","href":"Manually-implement-autocomplete","type":2,"isActive":false},{"label":"일회성 옵션 추가","href":"Add-one-time-option","type":2,"isActive":false},{"label":"빌드 및 릴리스","href":"Build-and-release","type":2,"isActive":false},{"label":"Milvus에 대해 자세히 알아보기","href":"Learn-more-about-Milvus","type":2,"isActive":false}]}