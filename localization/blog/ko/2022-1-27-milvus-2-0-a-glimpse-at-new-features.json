{"codeList":["from pymilvus import connections, utility, Collection, DataType, FieldSchema, CollectionSchema\n# connect to milvus\nhost = 'x.x.x.x'\nconnections.add_connection(default={\"host\": host, \"port\": 19530})\nconnections.connect(alias='default')\n# create a collection with customized primary field: id_field\ndim = 128\nid_field = FieldSchema(name=\"cus_id\", dtype=DataType.INT64, is_primary=True)\nage_field = FieldSchema(name=\"age\", dtype=DataType.INT64, description=\"age\")\nembedding_field = FieldSchema(name=\"embedding\", dtype=DataType.FLOAT_VECTOR, dim=dim)\nschema = CollectionSchema(fields=[id_field, age_field, embedding_field],\n                          auto_id=False, description=\"hello MilMil\")\ncollection_name = \"hello_milmil\"\ncollection = Collection(name=collection_name, schema=schema)\nimport random\n# insert data with customized ids\nnb = 300\nids = [i for i in range(nb)]\nages = [random.randint(20, 40) for i in range(nb)]\nembeddings = [[random.random() for _ in range(dim)] for _ in range(nb)]\nentities = [ids, ages, embeddings]\nins_res = collection.insert(entities)\nprint(f\"insert entities primary keys: {ins_res.primary_keys}\")\n","insert entities primary keys: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]\n","# search\nnq = 10\nsearch_vec = [[random.random() for _ in range(dim)] for _ in range(nq)]\nsearch_params = {\"metric_type\": \"L2\", \"params\": {\"nprobe\": 16}}\nlimit = 3\n# search 2 times to verify the vector persists\nfor i in range(2):\n    results = collection.search(search_vec, embedding_field.name, search_params, limit)\n    ids = results[0].ids\n    print(f\"search result ids: {ids}\")\n    expr = f\"cus_id in {ids}\"\n    # query to verify the ids exist\n    query_res = collection.query(expr)\n    print(f\"query results: {query_res}\")\n","search result ids: [76, 2, 246]\nquery results: [{'cus_id': 246}, {'cus_id': 2}, {'cus_id': 76}]\nsearch result ids: [76, 2, 246]\nquery results: [{'cus_id': 246}, {'cus_id': 2}, {'cus_id': 76}]\n","print(f\"trying to delete one vector: id={ids[0]}\")\ncollection.delete(expr=f\"cus_id in {[ids[0]]}\")\nresults = collection.search(search_vec, embedding_field.name, search_params, limit)\nids = results[0].ids\nprint(f\"after deleted: search result ids: {ids}\")\nexpr = f\"cus_id in {ids}\"\n# query to verify the id exists\nquery_res = collection.query(expr)\nprint(f\"after deleted: query res: {query_res}\")\nprint(\"completed\")\n","trying to delete one vector: id=76\nafter deleted: search result ids: [76, 2, 246]\nafter deleted: query res: [{'cus_id': 246}, {'cus_id': 2}, {'cus_id': 76}]\ncompleted\n","expr = f\"cus_id in {[76, 2, 246]}\"\n# query to verify the id exists\nquery_res = collection.query(expr)\nprint(f\"after deleted: query res: {query_res}\")\nprint(\"completed\")\n","after deleted: query res: [{'cus_id': 246}, {'cus_id': 2}]\ncompleted\n","for i in range(5):\n    start = time.time()\n    results = collection.search(search_vec, embedding_field.name, search_params, limit)\n    end = time.time()\n    print(f\"search latency: {round(end-start, 4)}\")\n    ids = results[0].ids\n    print(f\"search result ids: {ids}\")\n","collection_name = \"hello_milmil_consist_strong\"\ncollection = Collection(name=collection_name, schema=schema,\n                        consistency_level=CONSISTENCY_STRONG)\n","search latency: 0.3293\nsearch latency: 0.1949\nsearch latency: 0.1998\nsearch latency: 0.2016\nsearch latency: 0.198\ncompleted\n","collection_name = \"hello_milmil_consist_bounded\"\ncollection = Collection(name=collection_name, schema=schema,\n                        consistency_level=CONSISTENCY_BOUNDED)\n","search latency: 0.0144\nsearch latency: 0.0104\nsearch latency: 0.0107\nsearch latency: 0.0104\nsearch latency: 0.0102\ncompleted\n","# index\nindex_params = {\"index_type\": \"IVF_SQ8\", \"metric_type\": \"L2\", \"params\": {\"nlist\": 64}}\ncollection.create_index(field_name=embedding_field.name, index_params=index_params)\n# load\ncollection.load()\n","import random\n# insert data with customized ids\nnb = 50000\nids = [i for i in range(nb)]\nages = [random.randint(20, 40) for i in range(nb)]\nembeddings = [[random.random() for _ in range(dim)] for _ in range(nb)]\nentities = [ids, ages, embeddings]\nfor i in range(200):\n    ins_res = collection.insert(entities)\n    print(f\"insert entities primary keys: {ins_res.primary_keys}\")\n","# did this in another python console\nutility.get_query_segment_info(\"hello_milmil_handoff\")\n","[segmentID: 430640405514551298\ncollectionID: 430640403705757697\npartitionID: 430640403705757698\nmem_size: 394463520\nnum_rows: 747090\nindex_name: \"_default_idx\"\nindexID: 430640403745079297\nnodeID: 7\nstate: Sealed\n, segmentID: 430640405514551297\ncollectionID: 430640403705757697\npartitionID: 430640403705757698\nmem_size: 397536480\nnum_rows: 752910\nindex_name: \"_default_idx\"\nindexID: 430640403745079297\nnodeID: 7\nstate: Sealed\n...\n"],"headingContent":"Milvus 2.0: A Glimpse at New Features","anchorList":[{"label":"엔티티 삭제","href":"Entity-deletion","type":2,"isActive":false},{"label":"일관성 수준","href":"Consistency-level","type":2,"isActive":false},{"label":"핸드오프","href":"Handoff","type":2,"isActive":false},{"label":"그 외","href":"Whats-more","type":2,"isActive":false}]}