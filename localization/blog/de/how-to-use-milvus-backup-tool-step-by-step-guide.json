{"codeList":["├── configs\n│   └── backup.yaml\n├── milvus-backup\n└── README.md\n","milvus-backup is a backup&restore tool for milvus.\n\nUsage:\n milvus-backup [flags]\n milvus-backup [command]\n\nAvailable Commands:\n check       check if the connects is right.\n create      create subcommand create a backup.\n delete      delete subcommand delete backup by name.\n get         get subcommand get backup by name.\n help        Help about any command\n list        list subcommand shows all backup in the cluster.\n restore     restore subcommand restore a backup.\n server      server subcommand start milvus-backup RESTAPI server.\n\nFlags:\n     --config string   config YAML file of milvus (default \"backup.yaml\")\n -h, --help            help for milvus-backup\n\nUse \"milvus-backup [command] --help\" for more information about a command.\n","Usage:\n milvus-backup create [flags]\n\nFlags:\n -n, --name string                   backup name, if unset will generate a name automatically\n -c, --colls string                  collectionNames to backup, use ',' to connect multiple collections\n -d, --databases string              databases to backup\n -a, --database_collections string   databases and collections to backup, json format: {\"db1\":[\"c1\", \"c2\"],\"db2\":[]}\n -f, --force                         force backup, will skip flush, should make sure data has been stored into disk when using it\n     --meta_only                     only backup collection meta instead of data\n -h, --help                          help for create\n","Usage:\n milvus-backup restore [flags]\n\nFlags:\n -n, --name string                   backup name to restore\n -c, --collections string            collectionNames to restore\n -s, --suffix string                 add a suffix to collection name to restore\n -r, --rename string                 rename collections to new names, format: db1.collection1:db2.collection1_new,db1.collection2:db2.collection2_new\n -d, --databases string              databases to restore, if not set, restore all databases\n -a, --database_collections string   databases and collections to restore, json format: {\"db1\":[\"c1\", \"c2\"],\"db2\":[]}\n     --meta_only                     if true, restore meta only\n     --restore_index                 if true, restore index\n     --use_auto_index                if true, replace vector index with autoindex\n     --drop_exist_collection         if true, drop existing target collection before create\n     --drop_exist_index              if true, drop existing index of target collection before create\n     --skip_create_collection        if true, will skip collection, use when collection exist, restore index or data\n -h, --help                          help for restore\n","minio:\n address: localhost # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_A # Bucket name in MinIO/S3\n rootPath: files # The root path where the message is stored in MinIO/S3\n","# Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n address: localhost # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_A\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n  backupBucketName: \"bucket_A\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup create -c coll -n my_backup\n","./milvus-backup restore -c coll -n my_backup -s _bak\n","minio:\n address: localhost # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_A # Bucket name in MinIO/S3\n rootPath: files_A # The root path where the message is stored in MinIO/S3\n","minio:\n address: localhost # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_A # Bucket name in MinIO/S3\n rootPath: files_B # The root path where the message is stored in MinIO/S3\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: milvus_A\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n # Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n address: milvus_A # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_A\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files_A\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n backupBucketName: \"bucket_A\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup create -c coll -n my_backup\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: milvus_B\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n # Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n  address: milvus_B # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_A\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files_B\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n backupBucketName: \"bucket_A\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup restore -c coll -n my_backup -s _bak\n","minio:\n address: localhost # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_A # Bucket name in MinIO/S3\n rootPath: files # The root path where the message is stored in MinIO/S3\n","minio:\n address: localhost # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_B # Bucket name in MinIO/S3\n rootPath: files # The root path where the message is stored in MinIO/S3\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: milvus_A\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n # Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n address: localhost # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_A\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n backupBucketName: \"bucket_B\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup create -c coll -n my_backup\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: milvus_B\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n # Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n  address: localhost # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_B\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n  backupBucketName: \"bucket_B\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup restore -c coll -n my_backup -s _bak\n","minio:\n address: minio_A # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_A # Bucket name in MinIO/S3\n rootPath: files # The root path where the message is stored in MinIO/S3\n"," minio:\n address: minio_B # Address of MinIO/S3\n port: 9000 # Port of MinIO/S3\n accessKeyID: minioadmin # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n ssl:\n   tlsCACert: /path/to/public.crt # path to your CACert file, ignore when it is empty\n bucketName: bucket_B # Bucket name in MinIO/S3\n rootPath: files # The root path where the message is stored in MinIO/S3\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: milvus_A\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n # Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n address: minio_A # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_A\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n backupBucketName: \"bucket_A\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup create -c coll -n my_backup\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: milvus_B\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n # Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n address: minio_B # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"bucket_B\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n backupBucketName: \"bucket_B\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n","./milvus-backup restore -c coll -n my_backup -s _bak\n","# Configures the system log output.\nlog:\n level: info # Only supports debug, info, warn, error, panic, or fatal. Default 'info'.\n console: true # whether print log to console\n file:\n   rootPath: \"logs/backup.log\"\n","# milvus proxy address, compatible to milvus.yaml\nmilvus:\n address: localhost\n port: 19530\n authorizationEnabled: false\n # tls mode values [0, 1, 2]\n # 0 is close, 1 is one-way authentication, 2 is two-way authentication.\n tlsMode: 0\n user: \"root\"\n password: \"Milvus\"\n","# Related configuration of minio, which is responsible for data persistence for Milvus.\nminio:\n # cloudProvider: \"minio\" # deprecated use storageType instead\n storageType: \"minio\" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)\n address: localhost # Address of MinIO/S3\n port: 9000   # Port of MinIO/S3\n accessKeyID: minioadmin  # accessKeyID of MinIO/S3\n secretAccessKey: minioadmin # MinIO/S3 encryption string\n useSSL: false # Access to MinIO/S3 with SSL\n useIAM: false\n iamEndpoint: \"\"\n bucketName: \"a-bucket\" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance\n rootPath: \"files\" # Milvus storage root path in MinIO/S3, make it the same as your milvus instance\n\n # only for azure\n backupAccessKeyID: minioadmin  # accessKeyID of MinIO/S3\n backupSecretAccessKey: minioadmin # MinIO/S3 encryption string\n backupBucketName: \"a-bucket\" # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath\n backupRootPath: \"backup\" # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath\n"],"headingContent":"","anchorList":[{"label":"Vorbereitung","href":"Preparation","type":2,"isActive":false},{"label":"Befehlsübersicht","href":"Command-Overview","type":2,"isActive":false},{"label":"Anwendungsfälle für Sicherung/Wiederherstellung","href":"BackupRestore-Use-Cases","type":2,"isActive":false},{"label":"Anwendungsfall 1: Sichern und Wiederherstellen innerhalb einer Milvus-Instanz","href":"Use-Case-1-Backup-and-Restore-Within-One-Milvus-Instance","type":2,"isActive":false},{"label":"Anwendungsfall 2: Sichern und Wiederherstellen zwischen zwei Milvus-Instanzen, die sich ein S3-Bucket teilen","href":"Use-Case-2-Backup-and-Restore-Between-Two-Milvus-Instances-Sharing-One-S3-Bucket","type":2,"isActive":false},{"label":"Anwendungsfall 3: Sichern und Wiederherstellen zwischen zwei Milvus-Instanzen in einem S3, unterschiedliche Buckets","href":"Use-Case-3-Backup-and-Restore-Between-Two-Milvus-Instances-in-One-S3-Different-Buckets","type":2,"isActive":false},{"label":"Anwendungsfall 4: Sicherung und Wiederherstellung zwischen zwei Milvus-Instanzen über verschiedene S3-Dienste hinweg","href":"Use-Case-4-Backup-and-Restore-Between-Two-Milvus-Instances-Across-Different-S3-Services","type":2,"isActive":false},{"label":"Erläuterung der Konfigurationsdatei","href":"Configuration-File-Explanation","type":2,"isActive":false},{"label":"Fazit","href":"Conclusion","type":2,"isActive":false}]}